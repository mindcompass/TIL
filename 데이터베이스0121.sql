# 4장 수업 
SELECT * FROM EMP;

SELECT SAL *0.5, ROUND(SAL*0.5,0) AS "임금 반올림"  FROM EMP;

SELECT ROUND(123.321,-1);

SELECT SUBSTR(HIREDATE, 6,5) FROM EMP;


SELECT * FROM EMP
WHERE ENAME LIKE "%A%";

SELECT * FROM EMP
WHERE ENAME LIKE CONCAT('%','A','%');


SELECT NOW();

SELECT DATE_FORMAT(NOW(), '%Y / %m / %d');


SELECT DATE_FORMAT(NOW(),'%Y년 %m월 %d일');

SELECT *,
	IFNULL(COMM,0),
	CASE  DEPTNO
		WHEN 10 THEN '총무'
	 	WHEN 20 THEN '운영'
		ELSE '기타' END
	FROM EMP;

SELECT * FROM 제품;

SELECT MAX(재고량), 제품명  FROM 제품;
##개별적인 정보를 알려고 하면 오류가 발생함 
SELECT MIN(재고량), 제품명  FROM 제품;

SELECT * 
 FROM 제품
  WHERE 재고량 =(SELECT MAX(재고량) 
 						FROM 제품);--서브쿼리


SELECT COUNT(나이) FROM 고객; --NULL 제외
SELECT COUNT(*) FROM 고객;
SELECT COUNT(1) FROM 고객; -- 고
SELECT 1 FROM 고객;


#연습문제 4-1
SELECT * FROM EMP;

SELECT COUNT(EMPNO) AS 사원수 FROM EMP;


SELECT COUNT(EMPNO) AS 사원수 
FROM EMP
WHERE MGR IS NOT NULL;
#WHERE MGR>1;

SELECT 등급, ROUND(AVG(적립금),0), COUNT(*)
FROM 고객
GROUP BY 등급
HAVING AVG(적립금) >=1000
ORDER BY 등급  ASC
LIMIT ;



SELECT SUM(SAL) AS 급여합계 
FROM EMP
WHERE SAL<=2000;

SELECT COUNT(*) AS 사원수, AVG(SAL)AS 급여평균
FROM EMP
WHERE JOB= 'MANAGER';

SELECT MIN(SAL) AS '가장 낮은 사원'
FROM EMP;


SELECT MAX(SAL) AS '높은 사원'
FROM EMP
WHERE DEPTNO='30';

SELECT COUNT(DISTINCT JOB)
 FROM EMP;


#본문
SELECT * FROM 제품;

-- GROUP BY 사용시 GROUP 할 속성 또는 집계 함수
SELECT 제조업체 , COUNT(제조업체)  FROM 제품
 GROUP BY 제조업체;


#연습문제 4-2
#1번
SELECT DEPTNO, COUNT(*)
FROM EMP
GROUP BY DEPTNO;

#2번
SELECT JOB, COUNT(*) AS '사원수'
FROM EMP
GROUP BY JOB;


#3번

SELECT JOB, ROUND(AVG(SAL),0) AS '평균급여'
FROM EMP
GROUP BY JOB;


#4번
SELECT SUM(SAL), DEPTNO
FROM EMP
GROUP BY DEPTNO

#5번

SELECT COUNT(*) AS 사원수,  DEPTNO, JOB
FROM EMP
GROUP BY DEPTNO, JOB;


#6번

SELECT JOB, COUNT(*)
FROM EMP
GROUP BY JOB
HAVING COUNT(*)>=3;


#7번
SELECT DEPTNO, COUNT(*)
FROM EMP
GROUP BY JOB
HAVING COUNT(*)<=4;

#8번


SELECT JOB, EMPNO
FROM EMP
GROUP BY EMPNO
HAVING JOB='MANAGER';

SELECT * FROM EMP;



--연숩 문제 4-3

CREATE TABLE NOODLE (
 NUM INT
 , NAME VARCHAR(50)
 , COMPANY VARCHAR(10)
 , KIND VARCHAR(1)
 , PRICE INT
 , E_DATE DATETIME
);

INSERT INTO NOODLE VALUES (
 1, '안성탕면', '농심', 'M', 700, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 1, '김치라면', '삼양', 'M', 700, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 1, '진라면', '오뚜기', 'C', 800, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 1, '꼬꼬면', '팔도', 'C', 1000, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 2, '신라면', '농심', 'C', 1100, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 2, '삼양라면', '삼양', 'M', 700, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 3, '너구리', '농심', 'M', 850, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 3, '나가사키짬뽕', '삼양', 'C', 1300, NOW() + INTERVAL 3 MONTH);
INSERT INTO NOODLE VALUES (
 4, '짜파게티', '농심', 'C', 1200, NOW() + INTERVAL 3 MONTH);



#3-1
SELECT COMPANY, CONVERT(CONCAT(COUNT(*),'개') USING UTF8)
FROM NOODLE
GROUP BY COMPANY

SELECT COMPANY, CAST(CONCAT(COUNT(*),'개') AS VARCHAR(10))
FROM NOODLE
GROUP BY COMPANY


#3-나
SELECT COMPANY, CONVERT(CONCAT(COUNT(*),'개') USING UTF8)
FROM NOODLE
GROUP BY COMPANY
ORDER BY COUNT(*) ASC;


#3-다ㅣ

SELECT COMPANY, CONCAT(COUNT(*),'GAE')
FROM NOODLE
GROUP BY COMPANY
HAVING COUNT(*) >=3;



#4-라
SELECT NAME, COMPANY, DATE_FORMAT(E_DATE, '%Y년 %m월 %d일' ) AS "E_DATE"
FROM NOODLE
WHERE KIND="M" AND PRICE >=800 


#4-마

SELECT  MAX(PRICE)
FROM NOODLE
GROUP BY KIND
HAVING KIND="C"

#4-바

SELECT COMPANY, MIN(PRICE)
FROM NOODLE
GROUP BY COMPANY
ORDER BY COMPANY ASC;


#4-사
SELECT COMPANY,CONCAT(ROUND(SUM(PRICE),0), '원') AS '제조사별 합계'
FROM NOODLE
GROUP BY COMPANY
ORDER BY SUM(PRICE) ASC ;


#4-아
SELECT COMPANY,CONCAT(ROUND(AVG(PRICE),0), '원') AS '제조사별 평균'
FROM NOODLE
GROUP BY COMPANY
ORDER BY PRICE DESC ;



#연습문제 4-4
SELECT * FROM ACCIDENT;
#1번
SELECT WEEK, SUM(DIE)
FROM ACCIDENT
GROUP BY WEEK
#2번
SELECT AREA1, SUM(DIE)
FROM ACCIDENT
GROUP BY AREA1

#3번
SELECT AREA1, AREA2, SUM(DIE)
FROM ACCIDENT
GROUP BY AREA1, AREA2

#4번
SELECT KIND, COUNT(*)
FROM ACCIDENT
GROUP BY KIND
ORDER BY COUNT(*) DESC
LIMIT 0,5;

#5번
SELECT WEEK, COUNT(DIE)
FROM ACCIDENT
GROUP BY WEEK
ORDER BY COUNT(DIE) ASC
LIMIT 0,1;



SELECT WEEK, SUM(DIE)
FROM ACCIDENT
GROUP BY WEEK
ORDER BY COUNT(DIE) ASC
LIMIT 0,1;


#연습문제 4-5

SELECT * FROM VISITOR_TB
LIMIT 0,100;


#문제1
SELECT COUNT(*) 
FROM VISITOR_TB
WHERE VST_TIME BETWEEN '2018-01-01' AND '2019-01-01';



#문제2
SELECT IP_ADDRESS, COUNT(*) 
FROM VISITOR_TB
GROUP BY IP_ADDRESS
HAVING COUNT(*) >=2
ORDER BY COUNT(*) DESC;


#문제3
SELECT DATE_FORMAT(VST_TIME,'%Y'), COUNT(*) 
FROM VISITOR_TB
GROUP BY DATE_FORMAT(VST_TIME,'%Y' );


#문제4
SELECT DATE_FORMAT(VST_TIME,'%m'), COUNT(*) 
FROM VISITOR_TB
GROUP BY DATE_FORMAT(VST_TIME,'%m' )
ORDER BY COUNT(*) DESC;

#문제5
SELECT DATE_FORMAT(VST_TIME,'%Y-%m') AS 방문월 , CASE WHEN VST_PATH='1' THEN '검색'
		WHEN VST_PATH='2' THEN '부산관광공사' END AS 방문경로,COUNT(*)  AS 방문자
FROM VISITOR_TB
GROUP BY DATE_FORMAT(VST_TIME,'%Y-%m'),VST_PATH
ORDER BY DATE_FORMAT(VST_TIME,'%Y-%m');


SELECT * 
FROM 사원, 부서
WHERE 사원.`소속부서`=부서.`부서번호`;

SELECT *
FROM 사원
JOIN 부서
ON 사원.`소속부서`

SELECT * FROM EMP;
SELECT * FROM DEPT;

SELECT * 
FROM EMP,DEPT
WHERE EMP.DEPTNO=DEPT.DEPTNO;

SELECT *
FROM EMP
JOIN DEPT
	ON EMP.DEPTNO=DEPT.DEPTNO;

SELECT 주문.주문고객, 주문.주문제품, 제품.제품번호, 제품.제품명
FROM 제품, 주문
WHERE 주문.주문제품 = 제품.제품번호
AND 주문.주문고객 = 'banana';
 
 
SELECT * 
FROM 고객
JOIN  주문
ON 고객.`고객아이디`= 주문.`주문고객`
WHERE 고객.`나이` >=30

-- 
SELECT P.`제품명`
FROM 고객 C
JOIN 주문 O
ON C.`고객아이디` = O.`주문고객`
JOIN 제품 P
ON O.주문제품= P.제품번호
WHERE C.고객이름 ='고명석';


SELECT P.`제품명`,O.`주문일자`,O.`수량`
	FROM 주문 O
	JOIN 고객 C
	ON O.`주문고객`=C.`고객아이디`
	JOIN 제품 P
	ON P.`제품번호`=O.`주문제품`
WHERE O.`배송지`='서울시 마포구'


SELECT P.`제품명`
	FROM 주문 O
	JOIN  고객 C
	ON O.`주문고객`=C.`고객아이디`
	JOIN 제품 P
	ON P.`제품번호`=O.`주문제품`
WHERE O.`배송지`='서울시 마포구';

#연습문제 5-1
#문제1
SELECT E.ENAME, E.DEPTNO, T.DNAME
FROM EMP E
JOIN DEPT T
ON E.DEPTNO= T.DEPTNO

#문제2
SELECT *
FROM EMP E
JOIN DEPT T
ON E.DEPTNO= T.DEPTNO

#문제3

SELECT E.ENAME, E.COMM, E.SAL,T.LOC
FROM EMP E
JOIN DEPT T
ON E.DEPTNO= T.DEPTNO
WHERE  E.COMM IS NOT NULL


#문제4

SELECT T.DNAME,SUM(E.SAL)
FROM EMP E
JOIN DEPT T
ON E.DEPTNO= T.DEPTNO
WHERE  T.LOC= 'NEW YORK' OR T.LOC= 'DALLAS'
GROUP BY T.DNAME;

SELECT * FROM EMP;

#SELF조인
SELECT E1.EMPNO, E1.ENAME, E1.MGR ,E2.ENAME
FROM EMP E1
JOIN EMP E2
ON EMP E1.MGR= E2.EMPNO;



SELECT * FROM 제품;
SELECT * FROM 주문;

SELECT * 
FROM 제품 P
LEFT JOIN 주문 O
ON P.`제품번호`=O.`주문제품`;



SELECT * 
FROM 주문 O
RIGHT JOIN 제품 P
ON P.`제품번호`=O.`주문제품`;


--연습문제5-2

CREATE TABLE IT_MEMBER (
 NUM INT
 , NAME VARCHAR(10)
 , COURSE_NO INT
);
INSERT INTO IT_MEMBER VALUES (1, 'AA', 1);
INSERT INTO IT_MEMBER VALUES (2, 'BB', 1);
INSERT INTO IT_MEMBER VALUES (3, 'CC', 2);
INSERT INTO IT_MEMBER VALUES (4, 'DD', 2);
INSERT INTO IT_MEMBER VALUES (5, 'EE', 4);
INSERT INTO IT_MEMBER VALUES (6, 'FF', NULL);

CREATE TABLE COURSE02 (
 COURSE_NO INT
 , COURSE_NAME VARCHAR(20)
);
INSERT INTO COURSE02 VALUES (1, 'DIGITAL');
INSERT INTO COURSE02 VALUES (2, 'BIG DATA');
INSERT INTO COURSE02 VALUES (3, 'CLOUD');
INSERT INTO COURSE02 VALUES (4, 'NFC');


SELECT NUM, NAME, I.COURSE_NO, C.COURSE_NAME
FROM IT_MEMBER	I
JOIN COURSE02 C
ON I.COURSE_NO= C.COURSE_NO;

#문제2

SELECT NUM, NAME, C.COURSE_NO, C.COURSE_NAME
FROM IT_MEMBER	I
LEFT JOIN COURSE02 C
ON I.COURSE_NO= C.COURSE_NO;

#문제3
SELECT NUM, NAME, C.COURSE_NO, COURSE_NAME
FROM IT_MEMBER	I
RIGHT JOIN COURSE02 C
ON I.COURSE_NO= C.COURSE_NO;


SELECT* 
FROM EMP
WHERE SAL =1250;

SELECT * 
FROM EMP
WHERE SAL  IN (
				SELECT SAL 
				FROM EMP
				WHERE SAL =1250
				);



SELECT 고객이름, 적립금
FROM 고객
WHERE 적립금 = (SELECT MAX(적립금)
 FROM 고객);
 
 
SELECT 제품명, 단가
FROM 제품
WHERE 제조업체 = (SELECT 제조업체
 FROM 제품
 WHERE 제품명 = '달콤비스켓');



SELECT SAL 
FROM EMP
WHERE ENAME='ALLEN'

SELECT *
FROM EMP
WHERE SAL >=(SELECT SAL 
				FROM EMP
				WHERE ENAME='ALLEN');


SELECT DEPTNO 
FROM EMP
WHERE MGR IS NULL

SELECT * 
FROM EMP
WHERE DEPTNO =(SELECT DEPTNO 
					FROM EMP
					WHERE MGR IS NULL);
					
					
SELECT EMPNO
FROM EMP
WHERE COMM =0;

SELECT * FROM EMP;


SELECT * 
FROM EMP
WHERE SAL < (SELECT AVG(SAL)
				FROM EMP
					WHERE DEPTNO=(SELECT DEPTNO
					FROM EMP
					WHERE COMM =0));

-- 데이터 베이서 내용 되돌리기
SET @@AUTOCOMMit = 0;
ROLLBACK 
COMMIT;

SELECT * FROM 제품;

UPDATE 제품 SET 제품명 ='통큰파이'
WHERE 제품명 = '쿵떡파이';

#MYSQL RO
